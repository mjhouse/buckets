/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package buckets.ui;
import java.awt.Color;
import java.awt.Dimension;
import buckets.data.events.*;
import buckets.rules.RuleSet;
import buckets.rules.Rule;

import buckets.data.Broadcaster;
import buckets.data.Subscriber;

import javax.swing.JFileChooser;

import java.nio.file.Path;
import java.util.ArrayList;

import javax.swing.event.ListSelectionListener;

/**
 *
 * @author mhouse
 */
public class BucketsUI extends javax.swing.JFrame implements Subscriber, ListSelectionListener {
	private final Broadcaster broadcaster;
	
    /**
     * Creates new form BucketsUI
     */
    public BucketsUI(Broadcaster b) {        
        initComponents();
        broadcaster = b;
    }
    
    public void initCustom(){
        watchList.addListSelectionListener(this);
	ruleList.addListSelectionListener(this);
		
	System.setProperty("awt.useSystemAAFontSettings","on");
	System.setProperty("swing.aatext", "true");
        
        moveToEntry.setForeground(Color.BLACK);
        moveToEntry.setPlaceholderForeground(Color.GRAY);
        moveToEntry.setPlaceholder("Directory to move files to");
        
        regexEntry.setForeground(Color.BLACK);
        regexEntry.setPlaceholderForeground(Color.GRAY);
        regexEntry.setPlaceholder("RegEx");
        
        watchDirectoryInput.setForeground(Color.BLACK);
        watchDirectoryInput.setPlaceholderForeground(Color.GRAY);
        watchDirectoryInput.setPlaceholder("Directory to watch");
    }
    
    public void valueChanged(javax.swing.event.ListSelectionEvent e){
        String selected = watchList.getSelectedValue();
        watchDirectoryInput.setText(selected);
    }
    
    @Override
    public void notify ( BucketsEvent e ) {}
    
    public void setDirectories( ArrayList<Path> paths ){
        watchList.setListData(paths.stream()
            .map(p -> p.toString())
            .toArray(String[]::new));
    }
    
    public void setRules( RuleSet rules ){
        ArrayList<Rule> r = rules.asList();  
        ruleList.setListData(r.stream()
            .map(p -> p.toString())
            .toArray(String[]::new));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filePicker = new javax.swing.JFileChooser();
        Tabs = new javax.swing.JTabbedPane();
        watchTab = new javax.swing.JPanel();
        watchDirectoryPicker = new javax.swing.JButton();
        watchDirectoryList = new javax.swing.JScrollPane();
        watchList = new javax.swing.JList<>();
        watchAdd = new javax.swing.JButton();
        watchRemove = new javax.swing.JButton();
        watchDirectoryInput = new buckets.ui.CustomTextField();
        rulesTab = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        addRuleBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ruleList = new javax.swing.JList<>();
        removeRuleBtn = new javax.swing.JButton();
        regexEntry = new buckets.ui.CustomTextField();
        moveToEntry = new buckets.ui.CustomTextField();
        jLabel1 = new javax.swing.JLabel();

        filePicker.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        Tabs.setBorder(null);
        Tabs.setForeground(new java.awt.Color(1, 1, 1));
        Tabs.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        watchDirectoryPicker.setText("...");
        watchDirectoryPicker.setToolTipText("select a directory");
        watchDirectoryPicker.setContentAreaFilled(false);
        watchDirectoryPicker.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        watchDirectoryPicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                watchDirectoryPickerActionPerformed(evt);
            }
        });

        watchDirectoryList.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        watchList.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        watchList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        watchDirectoryList.setViewportView(watchList);

        watchAdd.setText("Add");
        watchAdd.setToolTipText("add the directory to the watchlist");
        watchAdd.setContentAreaFilled(false);
        watchAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        watchAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                watchAddActionPerformed(evt);
            }
        });

        watchRemove.setText("Remove");
        watchRemove.setToolTipText("remove the directory from the watchlist");
        watchRemove.setContentAreaFilled(false);
        watchRemove.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        watchRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                watchRemoveActionPerformed(evt);
            }
        });

        watchDirectoryInput.setToolTipText("An absolute path to a directory to watch");
        watchDirectoryInput.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        watchDirectoryInput.setMargin(new java.awt.Insets(0, 5, 0, 0));
        watchDirectoryInput.setPlaceholder("");
        watchDirectoryInput.setPlaceholderForeground(new java.awt.Color(160, 160, 160));

        javax.swing.GroupLayout watchTabLayout = new javax.swing.GroupLayout(watchTab);
        watchTab.setLayout(watchTabLayout);
        watchTabLayout.setHorizontalGroup(
            watchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(watchTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(watchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(watchDirectoryList)
                    .addGroup(watchTabLayout.createSequentialGroup()
                        .addComponent(watchDirectoryInput, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(watchDirectoryPicker, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(watchAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(watchRemove)
                        .addGap(0, 2, Short.MAX_VALUE)))
                .addContainerGap())
        );
        watchTabLayout.setVerticalGroup(
            watchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(watchTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(watchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(watchDirectoryInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(watchDirectoryPicker, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(watchRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(watchAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(watchDirectoryList, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                .addContainerGap())
        );

        Tabs.addTab("Watch", watchTab);

        jButton1.setText("...");
        jButton1.setToolTipText("select a directory for the rule to move files to");
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        addRuleBtn.setText("Add");
        addRuleBtn.setToolTipText("add your rule to the rules list");
        addRuleBtn.setContentAreaFilled(false);
        addRuleBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addRuleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRuleBtnActionPerformed(evt);
            }
        });

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        ruleList.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(ruleList);

        removeRuleBtn.setText("Remove");
        removeRuleBtn.setToolTipText("remove the selected rule from the list");
        removeRuleBtn.setContentAreaFilled(false);
        removeRuleBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        removeRuleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRuleBtnActionPerformed(evt);
            }
        });

        regexEntry.setToolTipText("Add a regular expression to match against a filename");
        regexEntry.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        regexEntry.setMargin(new java.awt.Insets(0, 5, 0, 0));
        regexEntry.setPlaceholder("");

        moveToEntry.setToolTipText("Add a full path to a directory to watch it");
        moveToEntry.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        moveToEntry.setMargin(new java.awt.Insets(0, 5, 0, 0));
        moveToEntry.setPlaceholder("");
        moveToEntry.setPlaceholderForeground(java.awt.Color.gray);

        javax.swing.GroupLayout rulesTabLayout = new javax.swing.GroupLayout(rulesTab);
        rulesTab.setLayout(rulesTabLayout);
        rulesTabLayout.setHorizontalGroup(
            rulesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rulesTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rulesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(rulesTabLayout.createSequentialGroup()
                        .addComponent(regexEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveToEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addRuleBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeRuleBtn)
                        .addGap(0, 2, Short.MAX_VALUE)))
                .addContainerGap())
        );
        rulesTabLayout.setVerticalGroup(
            rulesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rulesTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rulesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(moveToEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addRuleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeRuleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(regexEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                .addContainerGap())
        );

        Tabs.addTab("Rules", rulesTab);

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("test");
        jLabel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jLabel1.setFocusable(false);
        jLabel1.setInheritsPopupMenu(false);
        jLabel1.setRequestFocusEnabled(false);
        jLabel1.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Tabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Tabs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(5, 5, 5))
        );

        Tabs.getAccessibleContext().setAccessibleName("Tabs");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void watchRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_watchRemoveActionPerformed
		BucketsEvent e = new BucketsEvent(EventType.DEL_DIRECTORY)
			.add(new EventData("path",watchDirectoryInput.getText()));
        broadcaster.broadcast(e);
    }//GEN-LAST:event_watchRemoveActionPerformed

    private void watchDirectoryPickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_watchDirectoryPickerActionPerformed
        int result = filePicker.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            String file = filePicker.getSelectedFile().getAbsolutePath();
            watchDirectoryInput.setText(file);
        }
    }//GEN-LAST:event_watchDirectoryPickerActionPerformed

    private void watchAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_watchAddActionPerformed
		BucketsEvent e = new BucketsEvent(EventType.ADD_DIRECTORY)
			.add(new EventData("path",watchDirectoryInput.getText()));
		
        broadcaster.broadcast(e);
    }//GEN-LAST:event_watchAddActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int result = filePicker.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            String file = filePicker.getSelectedFile().getAbsolutePath();
            moveToEntry.setText(file);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void addRuleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRuleBtnActionPerformed
		BucketsEvent e = new BucketsEvent(EventType.ADD_RULE)
			.add(new EventData("regex",regexEntry.getText()))
			.add(new EventData("path",moveToEntry.getText()));
		
        broadcaster.broadcast(e);
    }//GEN-LAST:event_addRuleBtnActionPerformed

    private void removeRuleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRuleBtnActionPerformed
		int nsel = ruleList.getSelectedIndex();
		
		BucketsEvent e = new BucketsEvent(EventType.DEL_RULE)
			.add(new EventData("index",nsel));
		
        broadcaster.broadcast(e);
    }//GEN-LAST:event_removeRuleBtnActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        BucketsEvent e = new BucketsEvent(EventType.EXIT);
        broadcaster.broadcast(e);
    }//GEN-LAST:event_formWindowClosing
    
	
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BucketsUI(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Tabs;
    private javax.swing.JButton addRuleBtn;
    private javax.swing.JFileChooser filePicker;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private buckets.ui.CustomTextField moveToEntry;
    private buckets.ui.CustomTextField regexEntry;
    private javax.swing.JButton removeRuleBtn;
    private javax.swing.JList<String> ruleList;
    private javax.swing.JPanel rulesTab;
    private javax.swing.JButton watchAdd;
    private buckets.ui.CustomTextField watchDirectoryInput;
    private javax.swing.JScrollPane watchDirectoryList;
    private javax.swing.JButton watchDirectoryPicker;
    private javax.swing.JList<String> watchList;
    private javax.swing.JButton watchRemove;
    private javax.swing.JPanel watchTab;
    // End of variables declaration//GEN-END:variables
}
